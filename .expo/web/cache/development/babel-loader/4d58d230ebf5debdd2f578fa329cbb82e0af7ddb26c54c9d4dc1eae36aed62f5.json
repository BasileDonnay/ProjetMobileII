{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useRoute } from '@react-navigation/native';\nimport reactJsxParser from 'html-react-parser';\nimport CodeEditor, { CodeEditorSyntaxStyles } from '@rivascva/react-native-code-editor';\nimport { styles } from \"../styles/Styles\";\nimport CustomButton from \"../components/CustomButton\";\nimport levelInstructions from \"../data/levels.json\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction LevelScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    level = _useState2[0],\n    setLevel = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    instruction = _useState4[0],\n    setInstruction = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    javaCode = _useState6[0],\n    setJavaCode = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    output = _useState8[0],\n    setOutput = _useState8[1];\n  var reactOutput = new reactJsxParser(output);\n  var route = useRoute();\n  var screenWidth = Dimensions.get('window').width;\n  var lineHeight = 23;\n  useEffect(function () {\n    var _route$params;\n    if (route != null && (_route$params = route.params) != null && _route$params.level) {\n      var _route$params2;\n      var currentLevel = route == null ? void 0 : (_route$params2 = route.params) == null ? void 0 : _route$params2.level;\n      setLevel(currentLevel);\n      var currentInstruction = levelInstructions[currentLevel];\n      setInstruction(currentInstruction);\n    }\n  }, [route]);\n  var handleChange = function handleChange(code) {\n    setJavaCode(code);\n  };\n  var getSyntaxStyle = function getSyntaxStyle() {\n    if (Platform.OS === 'android') {\n      return CodeEditorSyntaxStyles.atomOneDark;\n    } else {\n      return CodeEditorSyntaxStyles.tomorrow;\n    }\n  };\n  var replaceNewlinesWithHtmlCodes = function replaceNewlinesWithHtmlCodes(text) {\n    var intermediary = text.replace(/\\\\n/g, '<br>').replace(/\\\\r/g, '').replace('{\"status\":1,\"signal\":null,\"output\":[null,\"', '');\n    var i = intermediary.indexOf('\",\"\"],\"pid\":');\n    var res = intermediary.substring(0, i);\n    return res;\n  };\n  var executeJavaCode = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var response = yield fetch('http://localhost:3001/execute', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Level': level\n        },\n        body: JSON.stringify({\n          code: javaCode\n        })\n      });\n      var result = yield response.text();\n      if (response.statusText != \"Internal Server Error\") {\n        setOutput(result);\n      } else {\n        setOutput(`<div>${replaceNewlinesWithHtmlCodes(result)}</div>`);\n      }\n    });\n    return function executeJavaCode() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(Text, {\n      style: styles.header,\n      children: [\"Level \", level]\n    }), _jsx(Text, {\n      style: styles.instruction,\n      children: instruction\n    }), _jsx(View, {\n      style: {\n        backgroundColor: '#282c34'\n      },\n      children: _jsx(CodeEditor, {\n        style: {\n          width: screenWidth,\n          height: 300,\n          fontSize: 30,\n          inputLineHeight: lineHeight,\n          inputColor: Platform.OS !== 'android' ? '#abb2bf' : undefined,\n          backgroundColor: '#282c34'\n        },\n        language: \"java\",\n        syntaxStyle: getSyntaxStyle(),\n        showLineNumbers: true,\n        autoFocus: true,\n        initialValue: \"return 1;\",\n        onChange: handleChange\n      })\n    }), _jsx(Text, {\n      children: \" \"\n    }), _jsx(CustomButton, {\n      title: \"Execute Java Code\",\n      color: \"green\",\n      height: 80,\n      width: 250,\n      onPress: executeJavaCode\n    }), _jsx(Text, {\n      style: styles.instruction,\n      children: \"Output:\"\n    }), _jsx(Text, {\n      children: reactOutput\n    })]\n  });\n}\nexport default LevelScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","Dimensions","Platform","useRoute","reactJsxParser","CodeEditor","CodeEditorSyntaxStyles","styles","CustomButton","levelInstructions","jsxs","_jsxs","jsx","_jsx","LevelScreen","_useState","_useState2","_slicedToArray","level","setLevel","_useState3","_useState4","instruction","setInstruction","_useState5","_useState6","javaCode","setJavaCode","_useState7","_useState8","output","setOutput","reactOutput","route","screenWidth","get","width","lineHeight","_route$params","params","_route$params2","currentLevel","currentInstruction","handleChange","code","getSyntaxStyle","OS","atomOneDark","tomorrow","replaceNewlinesWithHtmlCodes","text","intermediary","replace","i","indexOf","res","substring","executeJavaCode","_ref","_asyncToGenerator","response","fetch","method","headers","body","JSON","stringify","result","statusText","apply","arguments","style","container","children","header","backgroundColor","height","fontSize","inputLineHeight","inputColor","undefined","language","syntaxStyle","showLineNumbers","autoFocus","initialValue","onChange","title","color","onPress"],"sources":["C:/Users/basil/ProjetMobileII/pages/LevelScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, Dimensions, Platform } from 'react-native';\r\nimport { useRoute } from '@react-navigation/native';\r\nimport reactJsxParser from 'html-react-parser';\r\nimport CodeEditor, { CodeEditorSyntaxStyles } from '@rivascva/react-native-code-editor';\r\n\r\nimport { styles } from '../styles/Styles'; // Import the styles\r\nimport CustomButton from '../components/CustomButton';\r\nimport levelInstructions from '../data/levels.json'; // Import the JSON file\r\n\r\nfunction LevelScreen() {\r\n  const [level, setLevel] = useState('');\r\n  const [instruction, setInstruction] = useState('');\r\n  const [javaCode, setJavaCode] = useState(''); // State variable to store the Java code\r\n  const [output, setOutput] = useState(''); // State variable to store the output of the Java code\r\n\r\n  const reactOutput = new reactJsxParser(output);\r\n\r\n  const route = useRoute();\r\n\r\n  const screenWidth = Dimensions.get('window').width;\r\n\r\n  const lineHeight = 23;\r\n\r\n  useEffect(() => {\r\n    if (route?.params?.level) {\r\n      const currentLevel = route?.params?.level;\r\n      setLevel(currentLevel);\r\n\r\n      const currentInstruction = levelInstructions[currentLevel]; // Retrieve instruction for the current level from the JSON file\r\n      setInstruction(currentInstruction);\r\n    }\r\n  }, [route]);\r\n\r\n  const handleChange = (code) => {\r\n    setJavaCode(code);\r\n  };\r\n\r\n  const getSyntaxStyle = () => {\r\n    if (Platform.OS === 'android') {\r\n      return CodeEditorSyntaxStyles.atomOneDark;\r\n    } else {\r\n      return CodeEditorSyntaxStyles.tomorrow;\r\n    }\r\n  };\r\n\r\n  const replaceNewlinesWithHtmlCodes = (text) => {\r\n    const intermediary = text.replace(/\\\\n/g, '<br>').replace(/\\\\r/g, '').replace('{\"status\":1,\"signal\":null,\"output\":[null,\"', '');\r\n    const i = intermediary.indexOf('\",\"\"],\"pid\":');\r\n    const res = intermediary.substring(0,i);\r\n    return res;\r\n  };\r\n\r\n  const executeJavaCode = async () => {\r\n    // Send the Java code to the server\r\n    const response = await fetch('http://localhost:3001/execute', {\r\n    //const response = await fetch('http://192.168.16.1:3001/execute', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Level': level,\r\n      },\r\n      body: JSON.stringify({ code: javaCode }),\r\n    });\r\n\r\n    // Get the output from the server\r\n    var result = await response.text();\r\n    \r\n    // Set the output state\r\n    if(response.statusText != \"Internal Server Error\"){\r\n      setOutput(result);\r\n    } else {\r\n      setOutput(`<div>${replaceNewlinesWithHtmlCodes(result)}</div>`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.header}>Level {level}</Text>\r\n      <Text style={styles.instruction}>{instruction}</Text>\r\n      <View style={{ backgroundColor: '#282c34' }}>\r\n        <CodeEditor\r\n          style={{\r\n            width: screenWidth,\r\n            height: 300,\r\n            fontSize: 30,\r\n            inputLineHeight: lineHeight,\r\n            inputColor: Platform.OS !== 'android' ? '#abb2bf' : undefined, // Only activate this code when on web and not on Android\r\n            backgroundColor: '#282c34',\r\n          }}\r\n          language='java'\r\n          syntaxStyle= {getSyntaxStyle()}\r\n          showLineNumbers\r\n          autoFocus\r\n          initialValue='return 1;'\r\n          onChange={handleChange}\r\n        />\r\n      </View>\r\n      <Text> </Text>\r\n      <CustomButton title='Execute Java Code' color='green' height={80} width={250} onPress={executeJavaCode} />\r\n      <Text style={styles.instruction}>Output:</Text>\r\n      <Text>{reactOutput}</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default LevelScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}