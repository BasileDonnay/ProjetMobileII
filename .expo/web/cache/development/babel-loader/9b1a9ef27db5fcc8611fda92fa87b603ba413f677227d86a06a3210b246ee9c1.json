{"ast":null,"code":"var express = require('express');\nvar _require = require('child_process'),\n  exec = _require.exec;\nvar app = express();\nvar port = 3000;\napp.use(express.json());\napp.post('/executeJava', function (req, res) {\n  var javaCode = req.body.javaCode;\n  exec(`javac - && java -cp . ${javaCode}`, function (error, stdout, stderr) {\n    if (error) {\n      console.error(`Error: ${error.message}`);\n      res.status(500).json({\n        error: error.message\n      });\n      return;\n    }\n    if (stderr) {\n      console.error(`Stderr: ${stderr}`);\n      res.status(400).json({\n        error: stderr\n      });\n      return;\n    }\n    console.log(`Output: ${stdout}`);\n    res.json({\n      output: stdout\n    });\n  });\n});\napp.listen(port, function () {\n  console.log(`Server is running on port ${port}`);\n});","map":{"version":3,"names":["express","require","_require","exec","app","port","use","json","post","req","res","javaCode","body","error","stdout","stderr","console","message","status","log","output","listen"],"sources":["C:/Users/basil/ProjetMobileII/execute-java-code.js"],"sourcesContent":["/*const exec = require('child_process').exec;\r\n\r\n// Execute the Java code in the textfield.\r\n\r\nasync function executeJavaCode(javaCode) {\r\n  const output = await exec(`java -cp . HelloWorld.java`, {\r\n    input: javaCode,\r\n  });\r\n\r\n  return output;\r\n}\r\n\r\nmodule.exports = executeJavaCode;*/\r\n\r\nconst express = require('express');\r\nconst { exec } = require('child_process');\r\n\r\nconst app = express();\r\nconst port = 3000;\r\n\r\napp.use(express.json());\r\n\r\napp.post('/executeJava', (req, res) => {\r\n  const javaCode = req.body.javaCode; // Assuming you send Java code in the request body\r\n\r\n  // Execute Java code as a separate process\r\n  exec(`javac - && java -cp . ${javaCode}`, (error, stdout, stderr) => {\r\n    if (error) {\r\n      console.error(`Error: ${error.message}`);\r\n      res.status(500).json({ error: error.message });\r\n      return;\r\n    }\r\n    if (stderr) {\r\n      console.error(`Stderr: ${stderr}`);\r\n      res.status(400).json({ error: stderr });\r\n      return;\r\n    }\r\n    console.log(`Output: ${stdout}`);\r\n    res.json({ output: stdout });\r\n  });\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});\r\n"],"mappings":"AAcA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,IAAAC,QAAA,GAAiBD,OAAO,CAAC,eAAe,CAAC;EAAjCE,IAAI,GAAAD,QAAA,CAAJC,IAAI;AAEZ,IAAMC,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,IAAMK,IAAI,GAAG,IAAI;AAEjBD,GAAG,CAACE,GAAG,CAACN,OAAO,CAACO,IAAI,CAAC,CAAC,CAAC;AAEvBH,GAAG,CAACI,IAAI,CAAC,cAAc,EAAE,UAACC,GAAG,EAAEC,GAAG,EAAK;EACrC,IAAMC,QAAQ,GAAGF,GAAG,CAACG,IAAI,CAACD,QAAQ;EAGlCR,IAAI,CAAE,yBAAwBQ,QAAS,EAAC,EAAE,UAACE,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAK;IACnE,IAAIF,KAAK,EAAE;MACTG,OAAO,CAACH,KAAK,CAAE,UAASA,KAAK,CAACI,OAAQ,EAAC,CAAC;MACxCP,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;QAAEM,KAAK,EAAEA,KAAK,CAACI;MAAQ,CAAC,CAAC;MAC9C;IACF;IACA,IAAIF,MAAM,EAAE;MACVC,OAAO,CAACH,KAAK,CAAE,WAAUE,MAAO,EAAC,CAAC;MAClCL,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;QAAEM,KAAK,EAAEE;MAAO,CAAC,CAAC;MACvC;IACF;IACAC,OAAO,CAACG,GAAG,CAAE,WAAUL,MAAO,EAAC,CAAC;IAChCJ,GAAG,CAACH,IAAI,CAAC;MAAEa,MAAM,EAAEN;IAAO,CAAC,CAAC;EAC9B,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFV,GAAG,CAACiB,MAAM,CAAChB,IAAI,EAAE,YAAM;EACrBW,OAAO,CAACG,GAAG,CAAE,6BAA4Bd,IAAK,EAAC,CAAC;AAClD,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}