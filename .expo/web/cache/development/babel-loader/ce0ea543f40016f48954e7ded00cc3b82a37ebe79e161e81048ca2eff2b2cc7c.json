{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { styles } from \"../styles/Styles\";\nimport { useNavigation } from '@react-navigation/core';\nimport { auth } from \"../firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginScreen = function LoginScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    loading = _useState8[0],\n    setLoading = _useState8[1];\n  var navigation = useNavigation();\n  var handleLogin = function handleLogin() {\n    setLoading(true);\n    auth.signInWithEmailAndPassword(email, password).then(function (userCredentials) {\n      var user = userCredentials.user;\n      setLoading(false);\n      navigation.navigate(`Home`);\n    }).catch(function (error) {\n      setError('E-mail address or password not correct');\n      setLoading(false);\n    });\n  };\n  return _jsx(ScrollView, {\n    contentContainerStyle: styles.scrollViewContent,\n    children: _jsxs(KeyboardAvoidingView, {\n      style: styles.container,\n      behavior: \"padding\",\n      keyboardVerticalOffset: Platform.OS === 'ios' ? 40 : 0,\n      children: [_jsxs(View, {\n        style: styles.inputContainer,\n        children: [_jsx(Text, {\n          style: styles.inputLabel,\n          children: \"Email\"\n        }), _jsx(TextInput, {\n          placeholder: \"Type your email\",\n          value: email,\n          onChangeText: function onChangeText(text) {\n            return setEmail(text);\n          },\n          style: styles.input\n        }), _jsx(Text, {\n          style: styles.inputLabel,\n          children: \"Password\"\n        }), _jsx(View, {\n          style: styles.passwordInputContainer,\n          children: _jsx(TextInput, {\n            placeholder: \"Type your Password\",\n            value: password,\n            onChangeText: function onChangeText(text) {\n              return setPassword(text);\n            },\n            style: [styles.input, styles.passwordInput]\n          })\n        })]\n      }), error ? _jsx(Text, {\n        style: styles.errorText,\n        children: error\n      }) : null, _jsxs(View, {\n        style: styles.buttonContainer,\n        children: [_jsx(TouchableOpacity, {\n          onPress: handleLogin,\n          style: styles.button,\n          disabled: loading,\n          children: loading ? _jsx(ActivityIndicator, {\n            size: \"small\",\n            color: \"white\"\n          }) : _jsx(Text, {\n            style: styles.buttonText,\n            children: \"Login\"\n          })\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate('Register');\n          },\n          style: [styles.button, styles.buttonOutline],\n          children: _jsx(Text, {\n            style: styles.buttonOutlineText,\n            children: \"Create Account\"\n          })\n        })]\n      })]\n    })\n  });\n};\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","ActivityIndicator","KeyboardAvoidingView","Platform","ScrollView","Text","TextInput","TouchableOpacity","View","styles","useNavigation","auth","jsx","_jsx","jsxs","_jsxs","LoginScreen","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","error","setError","_useState7","_useState8","loading","setLoading","navigation","handleLogin","signInWithEmailAndPassword","then","userCredentials","user","navigate","catch","contentContainerStyle","scrollViewContent","children","style","container","behavior","keyboardVerticalOffset","OS","inputContainer","inputLabel","placeholder","value","onChangeText","text","input","passwordInputContainer","passwordInput","errorText","buttonContainer","onPress","button","disabled","size","color","buttonText","buttonOutline","buttonOutlineText"],"sources":["C:/Users/basil/ProjetMobileII/pages/LoginScreen.js"],"sourcesContent":["import React, {useState } from 'react';\r\nimport {\r\n    ActivityIndicator,\r\n    KeyboardAvoidingView,\r\n    Platform,\r\n    ScrollView,\r\n    Text,\r\n    TextInput,\r\n    TouchableOpacity,\r\n    View,\r\n} from 'react-native';\r\nimport { styles } from '../styles/Styles'; // Import the styles\r\nimport { useNavigation } from '@react-navigation/core';\r\nimport { auth } from '../firebase';\r\n\r\n\r\nconst LoginScreen = () => {\r\n    //const [showPassword, setShowPassword] = useState(false);\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const navigation = useNavigation();\r\n\r\n    const handleLogin = () => {\r\n        setLoading(true);\r\n        auth.signInWithEmailAndPassword(email, password)\r\n            .then(userCredentials => {\r\n                const user = userCredentials.user;\r\n                setLoading(false);\r\n                \r\n                navigation.navigate(`Home`)\r\n            })\r\n            .catch(error => {\r\n                setError('E-mail address or password not correct');\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    return (\r\n            <ScrollView contentContainerStyle={styles.scrollViewContent}>\r\n                <KeyboardAvoidingView\r\n                    style={styles.container}\r\n                    behavior=\"padding\"\r\n                    keyboardVerticalOffset={Platform.OS === 'ios' ? 40 : 0}\r\n                >\r\n\r\n                    <View style={styles.inputContainer}>\r\n                        <Text style={styles.inputLabel}>Email</Text>\r\n                        <TextInput\r\n                            placeholder=\"Type your email\"\r\n                            value={email}\r\n                            onChangeText={(text) => setEmail(text)}\r\n                            style={styles.input}\r\n                        />\r\n\r\n                        <Text style={styles.inputLabel}>Password</Text>\r\n                        <View style={styles.passwordInputContainer}>\r\n                            <TextInput\r\n                                placeholder=\"Type your Password\"\r\n                                value={password}\r\n                                onChangeText={(text) => setPassword(text)}\r\n                                style={[styles.input, styles.passwordInput]}\r\n                                // secureTextEntry={!showPassword}\r\n                            />\r\n                        </View>\r\n                    </View>\r\n\r\n                    {error ? <Text style={styles.errorText}>{error}</Text> : null}\r\n\r\n                    <View style={styles.buttonContainer}>\r\n                        <TouchableOpacity onPress={handleLogin} style={styles.button} disabled={loading}>\r\n                            {loading ? (\r\n                                <ActivityIndicator size=\"small\" color=\"white\" />\r\n                            ) : (\r\n                                <Text style={styles.buttonText}>Login</Text>\r\n                            )}\r\n                        </TouchableOpacity>\r\n                        <TouchableOpacity\r\n                            onPress={() => navigation.navigate('Register')}\r\n                            style={[styles.button, styles.buttonOutline]}\r\n                        >\r\n                            <Text style={styles.buttonOutlineText}>Create Account</Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                </KeyboardAvoidingView>\r\n            </ScrollView>\r\n    );\r\n};\r\n\r\nexport default LoginScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}