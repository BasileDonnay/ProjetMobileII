{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useNavigation } from '@react-navigation/native';\nimport { styles } from \"../styles/Styles\";\nimport CustomButton from \"../components/CustomButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction Level1() {\n  var navigation = useNavigation();\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    javaCode = _useState2[0],\n    setJavaCode = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    output = _useState4[0],\n    setOutput = _useState4[1];\n  var goBackToHome = function goBackToHome() {\n    navigation.goBack();\n  };\n  var executeJavaCode = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var response = yield fetch(\"http://localhost:3000/execute\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          code: javaCode\n        })\n      });\n      var result = yield response.text();\n      setOutput(result);\n    });\n    return function executeJavaCode() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.header,\n      children: \"Level 1\"\n    }), _jsx(TextInput, {\n      multiline: true,\n      style: styles.codeEditor,\n      value: javaCode,\n      onChangeText: function onChangeText(text) {\n        return setJavaCode(text);\n      },\n      placeholder: \"Enter your Java code here\"\n    }), _jsx(CustomButton, {\n      title: \"Execute Java Code\",\n      onPress: executeJavaCode\n    }), _jsx(CustomButton, {\n      title: \"Go Back\",\n      onPress: goBackToHome\n    }), _jsx(Text, {\n      style: {\n        marginTop: 10\n      },\n      children: \"Output:\"\n    }), _jsx(Text, {\n      children: output\n    })]\n  });\n}\nexport default Level1;","map":{"version":3,"names":["React","useState","View","Text","TextInput","useNavigation","styles","CustomButton","jsx","_jsx","jsxs","_jsxs","Level1","navigation","_useState","_useState2","_slicedToArray","javaCode","setJavaCode","_useState3","_useState4","output","setOutput","goBackToHome","goBack","executeJavaCode","_ref","_asyncToGenerator","response","fetch","method","headers","body","JSON","stringify","code","result","text","apply","arguments","style","container","children","header","multiline","codeEditor","value","onChangeText","placeholder","title","onPress","marginTop"],"sources":["C:/Users/basil/ProjetMobileII/level_data/Level1.js"],"sourcesContent":["/*import React, { useState } from 'react';\r\nimport { View, Text, TextInput } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { styles } from '../styles/Styles'; // Import the styles\r\nimport CustomButton from '../components/CustomButton';\r\n\r\nfunction Level1() {\r\n  const navigation = useNavigation();\r\n\r\n  // State variable to store the Java code\r\n  const [javaCode, setJavaCode] = useState('');\r\n\r\n  const goBackToHome = () => {\r\n    navigation.goBack();\r\n  };\r\n\r\n  const executeJavaCode = () => {\r\n    // Replace this with your Java code execution logic\r\n    // You may use a library or a native module to execute Java code\r\n    const result = 'Java code executed successfully!';\r\n    alert(result); // Display the result as an alert for demonstration purposes\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.header}>Level 1</Text>\r\n      <TextInput\r\n        multiline\r\n        style={styles.codeEditor}\r\n        value={javaCode}\r\n        onChangeText={(text) => setJavaCode(text)}\r\n        placeholder=\"Enter your Java code here\"\r\n      />\r\n      <CustomButton title=\"Execute Java Code\" onPress={executeJavaCode} />\r\n      <CustomButton title=\"Go Back\" onPress={goBackToHome} />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default Level1;*/\r\n\r\nimport React, { useState } from 'react';\r\nimport { View, Text, TextInput } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { styles } from '../styles/Styles'; // Import the styles\r\nimport CustomButton from '../components/CustomButton';\r\n\r\nfunction Level1() {\r\n  const navigation = useNavigation();\r\n\r\n  // State variable to store the Java code\r\n  const [javaCode, setJavaCode] = useState('');\r\n\r\n  // State variable to store the output of the Java code\r\n  const [output, setOutput] = useState('');\r\n\r\n  const goBackToHome = () => {\r\n    navigation.goBack();\r\n  };\r\n\r\n  const executeJavaCode = async () => {\r\n    // Send the Java code to the server\r\n    const response = await fetch(\"http://localhost:3000/execute\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ code: javaCode }),\r\n    });\r\n\r\n    // Get the output from the server\r\n    const result = await response.text();\r\n\r\n    // Set the output state\r\n    setOutput(result);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.header}>Level 1</Text>\r\n      <TextInput\r\n        multiline\r\n        style={styles.codeEditor}\r\n        value={javaCode}\r\n        onChangeText={(text) => setJavaCode(text)}\r\n        placeholder=\"Enter your Java code here\"\r\n      />\r\n      <CustomButton title=\"Execute Java Code\" onPress={executeJavaCode} />\r\n      <CustomButton title=\"Go Back\" onPress={goBackToHome} />\r\n      <Text style={{ marginTop: 10 }}>Output:</Text>\r\n      <Text>{output}</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default Level1;\r\n"],"mappings":";;AAyCA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAExC,SAASC,aAAa,QAAQ,0BAA0B;AACxD,SAASC,MAAM;AACf,OAAOC,YAAY;AAAmC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEtD,SAASC,MAAMA,CAAA,EAAG;EAChB,IAAMC,UAAU,GAAGR,aAAa,CAAC,CAAC;EAGlC,IAAAS,SAAA,GAAgCb,QAAQ,CAAC,EAAE,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAG5B,IAAAI,UAAA,GAA4BlB,QAAQ,CAAC,EAAE,CAAC;IAAAmB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjCE,MAAM,GAAAD,UAAA;IAAEE,SAAS,GAAAF,UAAA;EAExB,IAAMG,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IACzBV,UAAU,CAACW,MAAM,CAAC,CAAC;EACrB,CAAC;EAED,IAAMC,eAAe;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;MAElC,IAAMC,QAAQ,SAASC,KAAK,CAAC,+BAA+B,EAAE;QAC5DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAElB;QAAS,CAAC;MACzC,CAAC,CAAC;MAGF,IAAMmB,MAAM,SAASR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAGpCf,SAAS,CAACc,MAAM,CAAC;IACnB,CAAC;IAAA,gBAfKX,eAAeA,CAAA;MAAA,OAAAC,IAAA,CAAAY,KAAA,OAAAC,SAAA;IAAA;EAAA,GAepB;EAED,OACE5B,KAAA,CAACT,IAAI;IAACsC,KAAK,EAAElC,MAAM,CAACmC,SAAU;IAAAC,QAAA,GAC5BjC,IAAA,CAACN,IAAI;MAACqC,KAAK,EAAElC,MAAM,CAACqC,MAAO;MAAAD,QAAA,EAAC;IAAO,CAAM,CAAC,EAC1CjC,IAAA,CAACL,SAAS;MACRwC,SAAS;MACTJ,KAAK,EAAElC,MAAM,CAACuC,UAAW;MACzBC,KAAK,EAAE7B,QAAS;MAChB8B,YAAY,EAAE,SAAAA,aAACV,IAAI;QAAA,OAAKnB,WAAW,CAACmB,IAAI,CAAC;MAAA,CAAC;MAC1CW,WAAW,EAAC;IAA2B,CACxC,CAAC,EACFvC,IAAA,CAACF,YAAY;MAAC0C,KAAK,EAAC,mBAAmB;MAACC,OAAO,EAAEzB;IAAgB,CAAE,CAAC,EACpEhB,IAAA,CAACF,YAAY;MAAC0C,KAAK,EAAC,SAAS;MAACC,OAAO,EAAE3B;IAAa,CAAE,CAAC,EACvDd,IAAA,CAACN,IAAI;MAACqC,KAAK,EAAE;QAAEW,SAAS,EAAE;MAAG,CAAE;MAAAT,QAAA,EAAC;IAAO,CAAM,CAAC,EAC9CjC,IAAA,CAACN,IAAI;MAAAuC,QAAA,EAAErB;IAAM,CAAO,CAAC;EAAA,CACjB,CAAC;AAEX;AAEA,eAAeT,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}